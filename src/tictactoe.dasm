; TODO You may want to change the copyright of all files. This is the
; TODO ISC license. Choose another one if you want.
;
; Copyright (c) 2015 Joe Jackson <cpmhjoe@gmail.com>
;
; Permission to use, copy, modify, and/or distribute this software for any
; purpose with or without fee is hereby granted, provided that the above
; copyright notice and this permission notice appear in all copies.
;
; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
; OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

  processor 6502
  include "vcs.h"
  include "macro.h"

;------------------------------------------------------------------------------
; Variables

  seg.u vars
  org $80                             ; start of RAM

CombinedBoard ds 9
; pointers to the graphics for each slot
Pos0GrPtr ds 2
Pos1GrPtr ds 2
Pos2GrPtr ds 2
Pos3GrPtr ds 2
Pos4GrPtr ds 2
Pos5GrPtr ds 2
Pos6GrPtr ds 2
Pos7GrPtr ds 2
Pos8GrPtr ds 2

; Player Cursor xPos (0-2) yPos (0-2)
PlayerXpos ds 1
PlayerYpos ds 1

PreviousJoyStickState ds 1

; PlayerBoards These are just a bitmat for each player to check win states, and
; next moves this structure looks like this
;
; bit0 | bit1 | bit2
;------+------+-----
; bit3 | bit4 | bit5
;------+------+-----
; bit6 | bit7 | Byte2bit0
;
HumanPlayerBoard ds 2
ComputerPlayerBoard ds 2


FrameCount ds 1
PlayerButtonActive ds 1

; Temporary Pointer
TempPtr ds 2
TempByte ds 1

; 37 bytes 219 left

;------------------------------------------------------------------------------

  seg
  org $F000

Reset
  ; clear RAM and all TIA registers

  ldx #0
  lda #0
Clear sta 0,x
  inx
  bne Clear

  ldx #$FF
  txs                                 ; set stack pointer

;------------------------------------------------------------------------------
; Once only initialization

  lda #%00000001                      ; reflected playfield
  sta CTRLPF

  lda #$0e                            ; white board
  sta COLUPF                          ; set playfield color

  lda #$46
  sta COLUP0                          ; Player Sprite is Red

  ; load all of slots with empty graphics
  lda #<BlankEdge
  sta Pos0GrPtr
  lda #>BlankEdge
  sta Pos0GrPtr+1

  lda #<BlankMiddle
  sta Pos1GrPtr
  lda #>BlankMiddle
  sta Pos1GrPtr+1

  lda #<BlankEdge
  sta Pos2GrPtr
  lda #>BlankEdge
  sta Pos2GrPtr+1

  lda #<BlankEdge
  sta Pos3GrPtr
  lda #>BlankEdge
  sta Pos3GrPtr+1

  lda #<BlankMiddle
  sta Pos4GrPtr
  lda #>BlankMiddle
  sta Pos4GrPtr+1

  lda #<BlankEdge
  sta Pos5GrPtr
  lda #>BlankEdge
  sta Pos5GrPtr+1

  lda #<BlankEdge
  sta Pos6GrPtr
  lda #>BlankEdge
  sta Pos6GrPtr+1

  lda #<BlankMiddle
  sta Pos7GrPtr
  lda #>BlankMiddle
  sta Pos7GrPtr+1

  lda #<BlankEdge
  sta Pos8GrPtr
  lda #>BlankEdge
  sta Pos8GrPtr+1

  ; set player to 0,0
  lda #1
  sta PlayerXpos
  lda #1
  sta PlayerYpos

  ; quadruple sprite size
  lda #%00000111
  sta NUSIZ0
  sta PlayerButtonActive

;------------------------------------------------------------------------------
; Main Loop
Main
  jsr VerticalSync  ; 6 Jump to Vertical Sync
  jsr VerticalBlank ; 6 Jump to Vertical Blank
  jsr Kernel        ; 6 Jump to Kernel
  jsr Overscan      ; 6 Jump to Overscan
  jmp Main

;------------------------------------------------------------------------------
; VerticalSync Subroutine
VerticalSync
  lda #2      ; 2 Load with 2 so D1=1 to turn on VSYNC signal
  ldx #49

  sta WSYNC
  sta VSYNC ; D1=1 turns the Vertical Sync signal on
  stx TIM64T ; set timer to go of in 41 scanlines 49 = (41 * 76) / 64

  sta WSYNC
  sta WSYNC

  lda #0
  sta WSYNC                           ; 3rd scanline of VSYNC signal
  sta VSYNC                           ; D1 = 0 Turns Off VSYNC signal
  rts

;------------------------------------------------------------------------------
; VerticleBlank Subroutine 37 lines 37 * 76 = 2815 cycles max

VerticalBlank
  lda INPT4       ; 3 (3) Check if button pressed
  bmi ButtonNotPressed ; 3[2] (5)

  lda PlayerButtonActive ; Check if the button is active 1 yes 0 no
  beq ButtonNotPressed   ; TODO There are some settings  that could be
                         ; cleaned up with bitmasking

  lda PlayerYpos   ; 3 (8) load y-pos and multiply by 3
  clc              ; 2 (10)clear the carry
  adc PlayerYpos   ; 3 (13)
  adc PlayerYpos   ; 3 (13)

  adc PlayerXpos  ;  3 (16) get final position ex y=1 x=2  3 x 1 + 2 = 5
  tay             ;  2 (18) transfer a to y for storage

                  ; 18 (18) Intitialization section

  ;------------------------------------------------------------------------------
  ; Add position to player board

  tax             ; 2 (2) transfer player position to x to countdown 2^(player_pos)
                  ; changing 0 into 0000 0001 and 8 into 1000 0000
  lda CombinedBoard,x ; skip setting player position if already taken
  bne ButtonNotPressed

  lda #0          ; Set the button as not active if button pressed and spot is
  sta PlayerButtonActive ;not taken

  lda #1          ; 2 !!!!! set the board
  sta CombinedBoard,x     ; 2 !!!!!
  lda #0          ; 2 (4) prime a
  sec             ; 2 (6) prime for the loop if one pass (0) you will get 00000001
PosCountdown
  rol             ; 2 (8-first-pass) shift left
  dex             ; 2 (10-first-pass) count down
  bpl PosCountdown  ; 3[2] (14-first-pass) loop until negative
                  ; 0 will go through the loop once and will be negative
                  ; 8 will go through the loop 9 times and be negative when the
                  ; carry is set again
                  ; 50(worst case) 13(best case)
  ora HumanPlayerBoard ; 3 (53) Add the position to the player board
  sta HumanPlayerBoard ; 3 (56)
  bcc SkipSetPlayerTopPos ; 3[2] (58)
  lda #1          ; 2 (60) Load a 1 into the playboard high byte if the carry is set
  sta HumanPlayerBoard+1 ; 3 (63)

SkipSetPlayerTopPos

  tya             ; 2 (65) store player position back into a

                  ; 65 (83) for Add position section

  ;------------------------------------------------------------------------------
  ; Add Player Graphic To Board
  asl             ; 2 (2) multipy by 2 to get offset for 2 byte graphics
                  ; pointers
  tay             ; 2 (4) transfer a to y

  lda PlayerXpos  ; 3 (7) check if xpos is middle
  cmp #1          ; 2 (9)
  beq AddMiddle   ; 3[2] (12)

  lda #<XEdge     ; 4
  sta Pos0GrPtr,y ; 4
  lda #>XEdge     ; 4
  sta Pos0GrPtr+1,y ; 4
  jmp ButtonNotPressed ;3

AddMiddle
  lda #<XMiddle   ; 4 (16)
  sta Pos0GrPtr,y ; 4 (20)
  lda #>XMiddle   ; 4 (24)
  sta Pos0GrPtr+1,y ; 4 (28)

ButtonNotPressed

                ; 28 (111)

  ;------------------------------------------------------------------------------
  ; Check Player Win 188 (299) cycles to NoWinner
  ; Setting up the TempPtr to pass to the checking subroutine
  lda #<HumanPlayerBoard        ; 3 (3) Store the low byte first
  sta TempPtr                   ; 3 (6)
  lda #>HumanPlayerBoard        ; 3 (9) Store the high byte next
  sta TempPtr+1                 ; 3 (12)

  jsr CheckWinner               ; 6 + 163(worst_case) (181) six cycles for the jump
  beq NoWinner                  ; 2[3](184) Show player winning screen
  lda #0                        ; 2
  sta PlayerButtonActive        ; 3 Turn of player button
  jmp PlayerWins                ; is a winner

NoWinner
                                ; 184 (295)

  lda PlayerButtonActive ; Check if the button is active 1 yes 0 no
  bne SkipDrawingComputer

  ;------------------------------------------------------------------------------
  ; Check Computer Could Win
  ; Setting up the TempPtr to pass to the checking subroutine
  lda #<ComputerPlayerBoard        ; 3 (3) Store the low byte first
  sta TempPtr                   ; 3 (6)
  lda #>ComputerPlayerBoard        ; 3 (9) Store the high byte next
  sta TempPtr+1                 ; 3 (12)

  jsr CheckCouldWin             ; 6 + 503 (521)

  rol                           ; 2 (523)
  bcs CheckPlayerCouldWin       ; 3[2] (526)
  ror                           ; 2
  jmp AddComputerPosition       ; 3

                                ; 521 (816)
CheckPlayerCouldWin
  lda #<HumanPlayerBoard        ; 3 (819) Store the low byte first
  sta TempPtr                   ; 3 (822)
  lda #>HumanPlayerBoard        ; 3 (825) Store the high byte next
  sta TempPtr+1                 ; 3 (828)

  jsr CheckCouldWin             ; 6 + 503 (1337) So leet

  rol                           ; 2 (1339)
  bcs PickSpot                  ; 3[2] (1341)
  ror                           ; 2 (1343)
  jmp AddComputerPosition       ; 3

PickSpot
  ; pick first empty spot
  ldx #8
PickerLoop
  lda CombinedBoard,x
  beq BreakPickerLoop
  dex
  bpl PickerLoop

  jmp SkipDrawingComputer      ; no spot

BreakPickerLoop
  txa                          ; x is an open position

  ;------------------------------------------------------------------------------
  ; Add position to computer  board
AddComputerPosition
  tax             ; 2 (2) transfer computer position to x to countdown 2^(player_pos)
                  ; changing 0 into 0000 0001 and 8 into 1000 0000
  tay             ; 2 !!!!! Also store in y

  lda #1          ; 2 !!!!! set the board
  sta CombinedBoard,x     ; 2 !!!!!
  sta PlayerButtonActive ; Set the button as active once the computer chooses it's move

  lda #0          ; 2 (4) prime a
  sec             ; 2 (6) prime for the loop if one pass (0) you will get 00000001
CompPosCountdown
  rol             ; 2 (8-first-pass) shift left
  dex             ; 2 (10-first-pass) count down
  bpl CompPosCountdown  ; 3[2] (13-first-pass) loop until negative
                  ; 0 will go through the loop once and will be negative
                  ; 8 will go through the loop 9 times and be negative when the
                  ; carry is set again
                  ; 62(worst case) (68)
  tax             ; 2 (70) Store the bit position in x
  ora ComputerPlayerBoard ; 3 (73) Add the position to the computer board
  sta ComputerPlayerBoard ; 3 (76)
  bcc SkipSetComputerTopPos ; 3[2] (79)
  lda #1          ; 2 (81) Load a 1 into the computer high byte if the carry is set
  sta ComputerPlayerBoard+1 ; 3 (84)

SkipSetComputerTopPos
  tya             ; 2 (86) store computer position back into a
                  ; 86 (909) for Add position section

  ;------------------------------------------------------------------------------
  ; Add Computer Graphic To Board
DrawComputerGraphics
  asl             ; 2 (2) multipy by 2 to get offset for 2 byte graphics
                  ; pointers
  tay             ; 2 (4) transfer a to y

  txa                      ; 2 (7) Reload computer bit position
  and #%10010010           ; 2 Check if it's one of the middle ones
  bne CompAddMiddle        ; 3[2]

  lda #<OEdge     ; 4
  sta Pos0GrPtr,y ; 4
  lda #>OEdge     ; 4
  sta Pos0GrPtr+1,y ; 4
  jmp SkipDrawingComputer ;3

CompAddMiddle
  lda #<OMiddle   ; 4 (16)
  sta Pos0GrPtr,y ; 4 (20)
  lda #>OMiddle   ; 4 (24)
  sta Pos0GrPtr+1,y ; 4 (28)

SkipDrawingComputer

  ;------------------------------------------------------------------------------
  ; Move Player With Joystick

  lda PreviousJoyStickState
  cmp SWCHA
  beq SkipMove

  lda SWCHA
  sta PreviousJoyStickState

  lda #%10000000 ;Right?
  bit SWCHA
  bne SkipMoveRight

  lda PlayerXpos
  cmp #2
  beq SkipMove

  inc PlayerXpos ; Move Position Right

SkipMoveRight

  lda #%01000000 ;left?
  bit SWCHA
  bne SkipMoveLeft

  lda PlayerXpos
  cmp #0
  beq SkipMove

  dec PlayerXpos ; Move Position Left

SkipMoveLeft

  lda #%00100000 ;down?
  bit SWCHA
  bne SkipMoveDown

  lda PlayerYpos
  cmp #2
  beq SkipMove

  inc PlayerYpos ; Move Position Left

SkipMoveDown

  lda #%00010000 ;down?
  bit SWCHA
  bne SkipMoveUp

  lda PlayerYpos
  cmp #0
  beq SkipMove

  dec PlayerYpos ; Move Position Left

SkipMoveUp

SkipMove

  rts

;------------------------------------------------------------------------------
; 192 scanlines of picture 76 cycles per scanline

Kernel
; turn on display
  sta WSYNC
  lda INTIM ; check the timer
  bne Kernel
             ; A is still 0
  sta VBLANK ; D1=0 turns off VBLANK signal (display on)

;------------------------------------------------------------------------------
; FirstRow 64 Lines per row the first and last row have 4 lines of padding
  sta WSYNC
  ; determine horizontal position of cursor
  lda PlayerXpos ; 3 Load the x position of cursor
  cmp #0         ; 2 (5)
  bne SecondPos  ; 2[3] (7)

  SLEEP 17
  sta RESP0 ; 3
  jmp EndXPos

SecondPos ; starts at (8)
  cmp #1       ; 2 (10)
  bne ThirdPos

  SLEEP 27
  sta RESP0 ; 3
  jmp EndXPos

ThirdPos
  cmp #2
  bne EndXPos

  SLEEP 37
  sta RESP0 ; 3
  jmp EndXPos

EndXPos

  sta WSYNC
  sta WSYNC
  ; determine whether sprite is on this row
  lda #<BlankCursor ; 4 (4) load the low bite of blank cursor
  sta TempPtr       ; 3 (7)
  lda #>BlankCursor ; 4 (11) load the load bite of blank cursor
  sta TempPtr+1     ; 3 (14)

  lda PlayerYpos    ; 3 (17) is the player y position 0?
  cmp #0             ; 2 (19)
  bne SkipFirstRowSpritePointer ; 3[2] (21)

  lda #<Cursor      ; 4 (25) load the low bite of cursor
  sta TempPtr       ; 3 (28)
  lda #>Cursor      ; 4 (32) load the load bite of cursor
  sta TempPtr+1     ; 3 (35)
SkipFirstRowSpritePointer

  sta WSYNC

  ldx #28       ; 2 (2)
  lda PF1       ; 3 (5) This just wastes 3 cycles to sync with the next rows
FirstRowSegment
  txa            ; 2 (7) Load graphics from tables
  lsr            ; 2 (9) Divide by 4
  tay            ; 2 (11) Transfer into y register for offsetting
  lda (Pos0GrPtr),y ; 5 (16)
  sta PF1           ; 3 (19)
  lda (Pos1GrPtr),y ; 5 (24)
  sta PF2           ; 3 (27)

  SLEEP 15

  lda (Pos2GrPtr),y ; 5 (42) PF1 has been drawn it's safe to change the graphic
  sta PF1           ; 3 (45)

  sta WSYNC
  lda (Pos0GrPtr),y ; 5 (10)
  sta PF1           ; 3 (13) ; Don't overwrite Position 1

  lda (TempPtr),y   ; 5 (18)
  sta GRP0          ; 3 (21)

  sleep 24

  lda (Pos2GrPtr),y ; 5 (42) PF1 has been drawn it's safe to change the graphic
  sta PF1           ; 3 (45)

  sta WSYNC      ; 3 THIS must happen by 73
  dex            ; 2 (2)
  bne FirstRowSegment ; 3[2] (5)

; 4 Solid lines at bottom of row
  lda #%11111111
  sta PF1
  sta PF2
  sta WSYNC
  sta WSYNC
  sta WSYNC
  sta WSYNC

;------------------------------------------------------------------------------
; Second Row

; 4 Solid lines at top of row
  sta WSYNC
  sta WSYNC
  sta WSYNC
  ; determine whether sprite is on this row
  lda #<BlankCursor ; 4 (4) load the low bite of blank cursor
  sta TempPtr       ; 3 (7)
  lda #>BlankCursor ; 4 (11) load the load bite of blank cursor
  sta TempPtr+1     ; 3 (14)

  lda PlayerYpos    ; 3 (17) is the player y position 0?
  cmp #1            ; 2 (19)
  bne SkipSecondRowSpritePointer ; 3[2] (21)

  lda #<Cursor      ; 4 (25) load the low bite of cursor
  sta TempPtr       ; 3 (28)
  lda #>Cursor      ; 4 (32) load the load bite of cursor
  sta TempPtr+1     ; 3 (35)
SkipSecondRowSpritePointer

  sta WSYNC

  ldx #28       ; 2 (2)
  lda PF1       ; 3 (5) This just wastes 3 cycles to sync with the next rows
SecondRowSegment
  txa            ; 2 (7) Load graphics from tables
  lsr            ; 2 (9) Divide by 4
  tay            ; 2 (11) Transfer into y register for offsetting
  lda (Pos3GrPtr),y ; 5 (16)
  sta PF1           ; 3 (19)
  lda (Pos4GrPtr),y ; 5 (24)
  sta PF2           ; 3 (27)

  SLEEP 15

  lda (Pos5GrPtr),y ; 5 (42) PF1 has been drawn it's safe to change the graphic
  sta PF1           ; 3 (45)

  sta WSYNC
  lda (Pos3GrPtr),y ; 5 (10)
  sta PF1           ; 3 (13) ; Don't overwrite Position 1

  lda (TempPtr),y   ; 5 (18)
  sta GRP0          ; 3 (21)

  sleep 24

  lda (Pos5GrPtr),y ; 5 (42) PF1 has been drawn it's safe to change the graphic
  sta PF1           ; 3 (45)

  sta WSYNC      ; 3 THIS must happen by 73
  dex            ; 2 (2)
  bne SecondRowSegment ; 3[2] (5)

; 4 Solid lines at bottom of row
  lda #%11111111
  sta PF1
  sta PF2
  sta WSYNC
  sta WSYNC
  sta WSYNC
  sta WSYNC

;------------------------------------------------------------------------------
; Third Row

; 4 Solid lines at top of row
  sta WSYNC
  sta WSYNC
  sta WSYNC
  ; determine whether sprite is on this row
  lda #<BlankCursor ; 4 (4) load the low bite of blank cursor
  sta TempPtr       ; 3 (7)
  lda #>BlankCursor ; 4 (11) load the load bite of blank cursor
  sta TempPtr+1     ; 3 (14)

  lda PlayerYpos    ; 3 (17) is the player y position 0?
  cmp #2            ; 2 (19)
  bne SkipThirdRowSpritePointer ; 3[2] (21)

  lda #<Cursor      ; 4 (25) load the low bite of cursor
  sta TempPtr       ; 3 (28)
  lda #>Cursor      ; 4 (32) load the load bite of cursor
  sta TempPtr+1     ; 3 (35)
SkipThirdRowSpritePointer

  sta WSYNC

  ldx #28       ; 2 (2)
  lda PF1       ; 3 (5) This just wastes 3 cycles to sync with the next rows
ThirdRowSegment
  txa            ; 2 (7) Load graphics from tables
  lsr            ; 2 (9) Divide by 4
  tay            ; 2 (11) Transfer into y register for offsetting
  lda (Pos6GrPtr),y ; 5 (16)
  sta PF1           ; 3 (19)
  lda (Pos7GrPtr),y ; 5 (24)
  sta PF2           ; 3 (27)

  SLEEP 15

  lda (Pos8GrPtr),y ; 5 (42) PF1 has been drawn it's safe to change the graphic
  sta PF1           ; 3 (45)

  sta WSYNC
  lda (Pos6GrPtr),y ; 5 (10)
  sta PF1           ; 3 (13) ; Don't overwrite Position 1

  lda (TempPtr),y   ; 5 (18)
  sta GRP0          ; 3 (21)

  sleep 24

  lda (Pos8GrPtr),y ; 5 (42) PF1 has been drawn it's safe to change the graphic
  sta PF1           ; 3 (45)

  sta WSYNC      ; 3 THIS must happen by 73
  dex            ; 2 (2)
  bne ThirdRowSegment ; 3[2] (5)

; 4 Blank lines at bottom of row
  lda #0
  sta PF1
  sta PF2
  sta WSYNC
  sta WSYNC
  sta WSYNC
  sta WSYNC

;------------------------------------------------------------------------------
; Cleanup

  lda #0                               ; Clear player graphics
  sta PF1
  sta PF2

  rts ; return from Kernel


;------------------------------------------------------------------------------
; Overscan Subroutine

Overscan
  sta WSYNC
  lda #2
  sta VBLANK ; D1=1 turn image output off

  lda #32    ; set timer for 27 scanline 27 * 76 / 64
  sta TIM64T ; set timer to tick every 64 ticks

  ; logic goes here 2052 max
osWait
  sta WSYNC
  lda INTIM
  bne osWait
  rts

;------------------------------------------------------------------------------
; CheckWinner Subroutine (163 cycles worst case if not a winner)
; Params: TempPtr pointing at one of the player's boards
; Returns: 0 or 1 on the Accumulator for false or true
; Does not preserve registers

CheckWinner
  ldx #NumWinConds   ; 4 (4) load the number of win conditions
  ldy #0            ; 2 (6) load the low byte of the board from memory
  lda (TempPtr),y   ; 5 (11) load the board
  tay               ; 2 (13)

WinCheckLoop
  tya               ; 2 (15-first-pass)
  and WinConds,x    ; 4 (17-first-pass) check against win conditions
  cmp WinConds,x    ; 4 (21-first-pass)
  beq IsWinner      ; 3[2] (24-first-pass) if we have a winner break the loop
  dex               ; 2 (26-first-pass)
  bne WinCheckLoop  ; 3[2] (29-first-pass)
                    ; 84(worst-case) (97)

  ; Rotate the high byte onto the low byte
  ldy #1            ; 2 (99) load the high byte into the carry
  lda (TempPtr),y   ; 5 (104)
  sec               ; 2 (106) set carry for subtraction
  sbc #1            ; 2 (108) if high byte is 0 carry not set, if high byte 1
                    ; carry will still be set after subtration
  ldy #0            ; 2 (110) load the low byte again
  lda (TempPtr),y   ; 5 (115)

  ror               ; 2 (117) rotate the carry onto the board
  tax               ; 2 (119) store in x
  and #ShiftedWinConds1 ; 2 (121) check first shifted win conditions
  cmp #ShiftedWinConds1 ; 2 (123)
  beq IsWinner      ; 3[2] (125)

  txa               ; 2 (127) Load the rotated board
  and #ShiftedWinConds2 ; 2 (129) check first shifted win conditions
  cmp #ShiftedWinConds2 ; 2 (131)
  beq IsWinner      ; 3[2] (133)

  ; check the last condition rotate the carry (position 0) back onto the byte
  ; and check
  ldy #0            ; 2 (135) load the low byte again
  lda (TempPtr),y   ; 5 (140)
  ror              ; 2 (142)
  txa              ; 2 (144) Load the rotated board
  ror              ; 2 (146) rotate the carry onto the left side

  and #SpecialWinConds ; 2 (148)
  cmp #SpecialWinConds ; 2 (150)
  beq IsWinner     ; 3[2] (152)

  ; No winners
  lda #0          ; 2 (154) Store 0 to the accumulator
  jmp EndCheckWinner ; 3 (157)

IsWinner
  lda #1           ; 2 (unknown)Store 1 to the accumulator
EndCheckWinner
  rts           ; 6 (163)

;------------------------------------------------------------------------------
; CheckCouldWin Subroutine (505 worst case if there is no winning position)
; Params: TempPtr pointing at one of the player's boards
; Returns: Winning Position 0-8 on accumulator
;          Accumulator will be negative if no winning move
; Does not preserve registers

CheckCouldWin
  ldx #NumCouldWinConds ; 4 (4) load the number of win conditions
  ldy #0            ; 2 (6) load the low byte of the board from memory
  lda (TempPtr),y   ; 5 (11) load the board
  tay               ; 2 (13) store board in y

.WinCheckLoop
  stx TempByte          ; 3 !!!!
  lda CouldWinPosition,x ; 4 !!!! is the space taken?
  tax
  lda CombinedBoard,x
  bne .SpaceTaken     ; 3[2] !!!
  ldx TempByte        ; 3 !!!

  tya                 ; 2 (15-first-pass) refresh a from the stored board
  and CouldWinConds,x ; 4 (19-first-pass) check against win conditions
  cmp CouldWinConds,x ; 4 (23-frist-pass)
  beq CouldWin      ; 3[2] (25-first-pass) if we have a winner break the loop
.SpaceTaken
  ldx TempByte        ; 3 !!!
  dex               ; 2 (27-first-pass)
  bne .WinCheckLoop  ; 3[2] (30-first-pass)

                    ; 254 (267)

  ldx #NumShiftedCouldWinConds ; 4 (271) load the number of shifted win
                               ; conditions


  ; Rotate the high byte onto the low byte
  ldy #1            ; 2 (273) load the high byte into the carry
  lda (TempPtr),y   ; 5 (278)
  sec               ; 2 (280) set carry for subtraction
  sbc #1            ; 2 (282) if high byte is 0 carry not set, if high byte 1
                    ; carry will still be set after subtration
  ldy #0            ; 2 (284) load the low byte again
  lda (TempPtr),y   ; 5 (289)
  ror               ; 2 (291) rotate the carry onto the board
  tay               ; 2 (293) store the shifted board in y

.ShiftedWinCheckLoop
  stx TempByte          ; 3 !!!!
  lda ShiftedCouldWinPosition,x ; 4 !!!! is the space taken?
  tax
  lda CombinedBoard,x
  bne .ShiftedSpaceTaken     ; 3[2] !!!
  ldx TempByte        ; 3 !!!

  tya                        ; 2 (295-first-pass) refresh from stored shifted board
  and ShiftedCouldWinConds,x ; 4 (299-first-pass)
  cmp ShiftedCouldWinConds,x ; 4 (303-first-pass)
  beq ShiftedCouldWin        ; 3[2] (305-first-pass)
.ShiftedSpaceTaken
  ldx TempByte        ; 3 !!!
  dex                        ; 2 (307-first-pass)
  bne .ShiftedWinCheckLoop   ; 3[2] (310-first-pass)

                             ; 101 (394) worst case

  tya               ; 2
  tax               ; 2 Store shifted board in x
  ldy #0            ; 2 (400) load the low byte again
  lda (TempPtr),y   ; 5 (405)
  ror               ; 2 (409) rotate the 0 position onto the cary
  txa               ; 2 (411) load the shifted board
  ror               ; 2 (413) rotate the carry onto the special board
  tay               ; 2 (415) store the board

  ldx #NumSpecialCouldWinConds ; 4 (398)
.SpecialWinCheckLoop
  stx TempByte          ; 3 !!!!
  lda SpecialCouldWinPosition,x ; 4 !!!! is the space taken?
  tax
  lda CombinedBoard,x
  bne .SpecialSpaceTaken     ; 3[2] !!!
  ldx TempByte        ; 3 !!!

  tya                       ; 2 (417-first-pass)
  and SpecialCouldWinConds,x ; 4 (421-first-pass)
  cmp SpecialCouldWinConds,x ; 4 (425-first-pass)
  beq SpecialCouldWin      ; 3[2] (427-fist-pass)
.SpecialSpaceTaken
  ldx TempByte        ; 3 !!!
  dex                      ; 2 (429-first-pass)
  bne .SpecialWinCheckLoop
                           ; 50 (465) worst case

  sec                     ; 2 (467) set carry to return negative number
  ror                     ; 2 (469)
  rts                     ; 6 (505)

CouldWin
  lda CouldWinPosition,x
  rts             ; 6 ( )

ShiftedCouldWin
  lda ShiftedCouldWinPosition,x
  rts             ; 6 ( )

SpecialCouldWin
  lda SpecialCouldWinPosition,x
  rts

;------------------------------------------------------------------------------
; End Game Kernals
  include "player_wins.dasm"


;------------------------------------------------------------------------------
; Data Tables

  .align 256
; Top left to bottom right is not included here because it needs both position 0
; and position 9 has to be handled differently
NumWinConds = 5
WinConds
  .byte #0 ; Padding because of counting down
  .byte #%00000111 ; Top row
  .byte #%00111000 ; Middle row
  .byte #%01001001 ; Left column
  .byte #%10010010 ; Middle column
  .byte #%01010100 ; Top right to bottom left diagonal

; These are the win conditions when the board has position rotated onto the left
; side
ShiftedWinConds1 = %11100000 ; Bottom row
ShiftedWinConds2 = %10010010 ; Right column
SpecialWinConds = #%11000100 ; Top left to bottom right. Must be rotated right
                             ; twice to match

; For every position that doesn't include position 8
NumCouldWinConds = 15
CouldWinConds
  .byte #0 ; countdown padding
  ; position 0 could win
  .byte #%00000110 ; Top row
  .byte #%01001000 ; Left column

  ; position 1 could win
  .byte #%00000101 ; Top row
  .byte #%10010000 ; Middle Column

  ; position 2 could win
  .byte #%00000011 ; Top row
  .byte #%01010000 ; Top right to bottom left

  ; position 3 could win
  .byte #%00110000 ; Middle row
  .byte #%01000001 ; Left column

  ; position 4 could win
  .byte #%00101000 ; Middle row
  .byte #%10000010 ; Middle Column
  .byte #%01000100 ; Top right to bottom left

  ; position 5 could win
  .byte #%00011000 ; Middle row

  ; position 6 could win
  .byte #%00001001 ; Left Column
  .byte #%00010100 ; Top right to bottom left

  ; position 7 could win
  .byte #%00010010 ; Midde Column

CouldWinPosition
  .byte #0 ; countdown padding
  .byte #0, #0, #1, #1, #2, #2, #3, #3, #4, #4, #4, #5, #6, #6, #7

NumShiftedCouldWinConds = 6
ShiftedCouldWinConds
  .byte #0 ; countdown padding

  ; position 2 could win
  .byte #%10010000 ; Right column

  ; position 5 could win
  .byte #%10000010 ; Right column

  ; position 6 could win
  .byte #%11000000 ; bottom row

  ; position 7 could win
  .byte #%10100000 ; bottom row

  ; position 8 could win
  .byte #%01100000 ; bottom row
  .byte #%00010010 ; Right column

ShiftedCouldWinPosition
  .byte #0
  .byte #2, #5, #6, #7, #8, #8

; Top left to bottom right. Must be rotated right twice to match
NumSpecialCouldWinConds = 3
SpecialCouldWinConds
  .byte #0 ; countdown padding

  ; position 0 could win
  .byte #%01000100

  ; position 4 could win
  .byte #%11000000

  ; position 8 could win
  .byte #%10000100

SpecialCouldWinPosition
  .byte #0
  .byte #0, #4, #8

BlankEdge
  .byte #0,#0,#0,#0,#0,#0,#0
  .byte #0,#0,#0,#0,#0,#0,#0,#0 ; Why an extra?


BlankMiddle
  .byte #%00000110
  .byte #%00000110
  .byte #%00000110
  .byte #%00000110
  .byte #%00000110
  .byte #%00000110
  .byte #%00000110
  .byte #%00000110
  .byte #%00000110
  .byte #%00000110
  .byte #%00000110
  .byte #%00000110
  .byte #%00000110
  .byte #%00000110
  .byte #%00000110 ; Why an extra?

XEdge
  .byte #%00000000
  .byte #%01000001
  .byte #%01000001
  .byte #%00100010
  .byte #%00100010
  .byte #%00010100
  .byte #%00001000
  .byte #%00001000
  .byte #%00010100
  .byte #%00100010
  .byte #%00100010
  .byte #%01000001
  .byte #%01000001
  .byte #%00000000
  .byte #%00000000 ; Why an extra?

XMiddle
  .byte #%00000110
  .byte #%00010110
  .byte #%00010110
  .byte #%00100110
  .byte #%00100110
  .byte #%01000110
  .byte #%10000110
  .byte #%10000110
  .byte #%01000110
  .byte #%00100110
  .byte #%00100110
  .byte #%00010110
  .byte #%00010110
  .byte #%00000110
  .byte #%00000110 ; Why an extra?

OEdge
  .byte #%00000000
  .byte #%00111110
  .byte #%01000001
  .byte #%01000001
  .byte #%01000001
  .byte #%01000001
  .byte #%01000001
  .byte #%01000001
  .byte #%01000001
  .byte #%01000001
  .byte #%01000001
  .byte #%01000001
  .byte #%00111110
  .byte #%00000000
  .byte #%00000000 ; Why an extra?

OMiddle
  .byte #%00000110
  .byte #%11100110
  .byte #%00010110
  .byte #%00010110
  .byte #%00010110
  .byte #%00010110
  .byte #%00010110
  .byte #%00010110
  .byte #%00010110
  .byte #%00010110
  .byte #%00010110
  .byte #%00010110
  .byte #%11100110
  .byte #%00000110
  .byte #%00000110 ; Why an extra?

; Player Cursor

BlankCursor
  .byte #0,#0,#0,#0,#0,#0,#0
  .byte #0,#0,#0,#0,#0,#0,#0,#0 ; Why an extra?

Cursor
  .byte #%00000000
  .byte #%11111111
  .byte #%10000001
  .byte #%10000001
  .byte #%10000001
  .byte #%10000001
  .byte #%10000001
  .byte #%10000001
  .byte #%10000001
  .byte #%10000001
  .byte #%10000001
  .byte #%10000001
  .byte #%10000001
  .byte #%11111111
  .byte #%11111111
;------------------------------------------------------------------------------
  org $FFFA

InterruptVectors
  .word Reset          ; NMI
  .word Reset          ; RESET
  .word Reset          ; IRQ

  END
